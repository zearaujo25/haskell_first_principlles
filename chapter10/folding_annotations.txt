foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z [] = z
foldr f z (x:xs) = f x (foldr f z xs)


foldr (*) 1 [1..5]

(*) 1 ((*) 2 ((*) 3 ((*) 4 ((*) 5 (1)))))

= 1 * ( 2* ( 3 * ( 4* (5* (1)))))
= 120



foldl :: (b -> a -> b) -> b -> [a] -> b
foldl f acc [] = acc
foldl f acc (x:xs) = foldl f (f acc x) xs



foldl f 1 [1..3] = foldl f (f 1 1) [2,3] = 
foldl f (f (f 1 1) 2) [3] =  
foldl f (f (f (f 1 1) 2) 3) [] = 
(f (f (f 1 1) 2) 3) =

se f = (flip (*))
((flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) 3)=
((*) 3 ((*) 2  ((*) 1 1))) = 
3 * (2* (1* 1))

se f =  (*)
((*) ((*) ((*) 1 1) 2) 3)=
(((1*1)*2)*3)

se f =  ((++).show)
(((++).show) (((++).show) (((++).show) "" 1 ) 2) 3)=
(((1*1)*2)*3)

1
2*1 = 2
3*2*1 = 6
4*3*2*1 = 24


fibs = 1 : scanl (+) 1 fibs = 
1 : 1 : scanl (+) ((+) 1 1) fibs 
1:1:2: scanl (+) ((+) 2 1) fibs
1:1:2:3:scanl (+) ((+) 3 1) fibs 


scanl :: (a -> b -> a) -> a -> [b] -> [a]
scanl f q ls = q : (case ls of
            []-> []
            x:xs -> scanl f (f q x) xs)
